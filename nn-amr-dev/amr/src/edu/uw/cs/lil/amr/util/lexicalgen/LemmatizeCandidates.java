package edu.uw.cs.lil.amr.util.lexicalgen;

import java.io.File;
import java.io.IOException;

import jregex.Matcher;
import jregex.Pattern;
import edu.cornell.cs.nlp.spf.data.singlesentence.SingleSentence;
import edu.cornell.cs.nlp.spf.data.singlesentence.SingleSentenceCollection;
import edu.cornell.cs.nlp.spf.mr.lambda.LogicLanguageServices;
import edu.cornell.cs.nlp.spf.mr.lambda.LogicalConstant;
import edu.cornell.cs.nlp.spf.mr.lambda.visitor.GetConstantsMultiSet;
import edu.cornell.cs.nlp.utils.log.Log;
import edu.cornell.cs.nlp.utils.log.LogLevel;
import edu.cornell.cs.nlp.utils.log.Logger;
import edu.uw.cs.lil.amr.Init;
import edu.uw.cs.lil.amr.data.Tokenizer;
import edu.uw.cs.lil.amr.lambda.AMRServices;

/**
 * Given sentences paired with logical form, return sentences paired with
 * constants potentially generated by lemmatizing words.
 *
 * @author Yoav Artzi
 */
public class LemmatizeCandidates {
	private static final Pattern	PROPBANK_PREDICATE	= new Pattern(
																"({sense}.+)-\\d\\d");

	private LemmatizeCandidates() {
		// Utility class. No ctor.
	}

	public static void main(String[] args) throws IOException {
		// //////////////////////////////////////////
		// Init logging
		// //////////////////////////////////////////

		Logger.DEFAULT_LOG = new Log(System.err);
		Logger.setSkipPrefix(true);
		LogLevel.INFO.set();

		// //////////////////////////////////////////
		// Init AMR.
		// //////////////////////////////////////////

		Init.init(new File(args[0]), false);

		for (final SingleSentence sentence : SingleSentenceCollection.read(
				new File(args[1]), new Tokenizer())) {
			System.out.println(sentence.getSample());
			for (final LogicalConstant c : GetConstantsMultiSet.of(sentence
					.getLabel())) {
				if (!LogicLanguageServices.isCoordinationPredicate(c)
						&& !c.getBaseName().startsWith("c_")
						&& !LogicLanguageServices.getNumeralType().equals(
								c.getType())
						&& !AMRServices.isRefPredicate(c)
						&& !LogicLanguageServices.getNegationPredicate()
								.equals(c) && !AMRServices.isSkolemPredicate(c)
						&& !AMRServices.isTextType(c.getType())) {
					final Matcher matcher = PROPBANK_PREDICATE.matcher(c
							.getBaseName());
					if (matcher.matches()) {
						System.out.println(matcher.group("sense"));
					} else {
						System.out.println(c.getBaseName());
					}
				}
			}
			System.out.println();
		}

	}

}
