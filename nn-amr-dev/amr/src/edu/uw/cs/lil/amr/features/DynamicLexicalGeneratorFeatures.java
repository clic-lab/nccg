package edu.uw.cs.lil.amr.features;

import java.util.Collections;
import java.util.Set;

import edu.cornell.cs.nlp.spf.base.hashvector.IHashVector;
import edu.cornell.cs.nlp.spf.base.hashvector.KeyArgs;
import edu.cornell.cs.nlp.spf.ccg.categories.syntax.Syntax;
import edu.cornell.cs.nlp.spf.ccg.lexicon.LexicalEntry;
import edu.cornell.cs.nlp.spf.data.situated.sentence.SituatedSentence;
import edu.cornell.cs.nlp.spf.explat.IResourceRepository;
import edu.cornell.cs.nlp.spf.explat.ParameterizedExperiment.Parameters;
import edu.cornell.cs.nlp.spf.explat.resources.IResourceObjectCreator;
import edu.cornell.cs.nlp.spf.explat.resources.usage.ResourceUsage;
import edu.cornell.cs.nlp.spf.mr.lambda.LogicalExpression;
import edu.cornell.cs.nlp.spf.parser.ccg.ILexicalParseStep;
import edu.cornell.cs.nlp.spf.parser.ccg.IParseStep;
import edu.cornell.cs.nlp.spf.parser.ccg.model.lexical.ILexicalFeatureSet;
import edu.uw.cs.lil.amr.data.AMRMeta;

/**
 * Features to cross the source of the lexical entry (if generated by a dynamic
 * generator) and the POS tags of the words. By default ignores EMPTY lexical
 * entries.
 *
 * @author Yoav Artzi
 */
public class DynamicLexicalGeneratorFeatures implements
		ILexicalFeatureSet<SituatedSentence<AMRMeta>, LogicalExpression> {
	private static final String	DEFAULT_FEATURE_TAG	= "DYN";
	private static final long	serialVersionUID	= 4599275033259565746L;
	private final String		featureTag;
	private final boolean		ignoreEmptyEntries;

	public DynamicLexicalGeneratorFeatures(String featureTag,
			boolean ignoreEmptyEntries) {
		this.featureTag = featureTag;
		this.ignoreEmptyEntries = ignoreEmptyEntries;
	}

	@Override
	public boolean addEntry(LexicalEntry<LogicalExpression> entry,
			IHashVector parametersVector) {
		// Nothing to do.
		return false;
	}

	@Override
	public Set<KeyArgs> getDefaultFeatures() {
		return Collections.emptySet();
	}

	@Override
	public void setFeatures(IParseStep<LogicalExpression> parseStep,
			IHashVector features, SituatedSentence<AMRMeta> dataItem) {
		if (parseStep instanceof ILexicalParseStep) {
			final LexicalEntry<LogicalExpression> lexicalEntry = ((ILexicalParseStep<LogicalExpression>) parseStep)
					.getLexicalEntry();
			if (lexicalEntry.isDynamic()) {
				if (!ignoreEmptyEntries || !lexicalEntry.getCategory()
						.getSyntax().equals(Syntax.EMPTY)) {
					features.add(featureTag, lexicalEntry.getOrigin(), 1.0);
				}
			}
		}
	}

	public static class Creator
			implements IResourceObjectCreator<DynamicLexicalGeneratorFeatures> {

		private final String type;

		public Creator() {
			this("feat.lex.dyngen");
		}

		public Creator(String type) {
			this.type = type;
		}

		@Override
		public DynamicLexicalGeneratorFeatures create(Parameters params,
				IResourceRepository repo) {
			return new DynamicLexicalGeneratorFeatures(
					params.get("tag", DEFAULT_FEATURE_TAG),
					params.getAsBoolean("ignoreEmpties", true));
		}

		@Override
		public String type() {
			return type;
		}

		@Override
		public ResourceUsage usage() {
			return ResourceUsage
					.builder(type, DynamicLexicalGeneratorFeatures.class)
					.setDescription(
							"Features to cross POS tags and the origin of the lexical entry for dynamically generated entries")
					.addParam("ignoreEmpties", Boolean.class,
							"Ignore EMPTY lexical entries (default: true)")
					.addParam("tag", String.class, "Feature tag (default: "
							+ DEFAULT_FEATURE_TAG + ")")
					.build();
		}

	}

}
